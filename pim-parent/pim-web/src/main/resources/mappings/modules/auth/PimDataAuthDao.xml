<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sinux.modules.auth.dao.PimDataAuthDao">

    <sql id="baseColumnList">
						a.id AS "id",
				a.user_id AS "userId",
				a.update_date AS "updateDate",
				a.create_date AS "createDate",
				a.update_by AS "updateById",
				a.create_by AS "createById",
				a.auth_id AS "authId",
				a.auth_name AS "authName",
				a.auth_type AS "authType"
	</sql>

    <sql id="insertColumnList">
						id,
				user_id,
				update_date,
				create_date,
				update_by,
				create_by,
				auth_id,
				auth_name,
				auth_type
	</sql>


    <sql id="sql_of_where">
        where 1=1
        <if test="id != null">
            AND a.id = #{id}
        </if>
        <if test="userId != null">
            AND a.user_id = #{userId}
        </if>
        <if test="updateDate != null">
            AND a.update_date = #{updateDate}
        </if>
        <if test="createDate != null">
            AND a.create_date = #{createDate}
        </if>
        <if test="updateById != null">
            AND a.update_by = #{updateById}
        </if>
        <if test="createById != null">
            AND a.create_by = #{createById}
        </if>
        <if test="authId != null">
            AND a.auth_id = #{authId}
        </if>
        <if test="authName != null">
            AND a.auth_name = #{authName}
        </if>
        <if test="authType != null">
            AND a.auth_type = #{authType}
        </if>
    </sql>

    <sql id="sql_of_where_ext">
        <include refid="sql_of_where"/>
        <if test="ids != null and ids.size > 0">
            AND a.id IN
            <foreach collection="ids" item="id" open="(" separator="," close=")">
                #{id}
            </foreach>
        </if>
    </sql>

    <select id="select" parameterType="com.sinux.modules.auth.entity.PimDataAuth"
            resultType="com.sinux.modules.auth.entity.PimDataAuth">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth a
        <include refid="sql_of_where"/>
        <if test="page.orderBy != null and page.orderBy != ''">
            ORDER BY ${page.orderBy}
        </if>
    </select>


    <select id="selectByExt" parameterType="com.sinux.modules.auth.entity.ext.PimDataAuthExt"
            resultType="com.sinux.modules.auth.entity.PimDataAuth">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth a
        <include refid="sql_of_where_ext"/>
        <if test="page.orderBy != null and page.orderBy != ''">
            ORDER BY ${page.orderBy}
        </if>
    </select>

    <insert id="insert" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
        INSERT INTO pim_data_auth
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateById != null">
                update_by,
            </if>
            <if test="createById != null">
                create_by,
            </if>
            <if test="authId != null">
                auth_id,
            </if>
            <if test="authName != null">
                auth_name,
            </if>
            <if test="authType != null">
                auth_type,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="userId != null">
                #{userId},
            </if>
            <if test="updateDate != null">
                #{updateDate},
            </if>
            <if test="createDate != null">
                #{createDate},
            </if>
            <if test="updateById != null">
                #{updateById},
            </if>
            <if test="createById != null">
                #{createById},
            </if>
            <if test="authId != null">
                #{authId},
            </if>
            <if test="authName != null">
                #{authName},
            </if>
            <if test="authType != null">
                #{authType},
            </if>
        </trim>
    </insert>

    <insert id="insertBatch" parameterType="com.sinux.core.persistence.BatchEntity">
        insert into pim_data_auth
        (
        <include refid="insertColumnList"/>
        )
        <if test="dbName == 'mysql'">
            values
            <if test="dataList != null and dataList.size > 0">
                <foreach collection="dataList" item="item" separator=",">
                    (
                    <choose>
                        <when test="item.id != null">#{item.id}</when>
                        <otherwise>null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.userId != null">,#{item.userId}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.updateDate != null">,#{item.updateDate}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.createDate != null">,#{item.createDate}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.updateById != null">,#{item.updateById}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.createById != null">,#{item.createById}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.authId != null">,#{item.authId}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.authName != null">,#{item.authName}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.authType != null">,#{item.authType}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    )
                </foreach>
            </if>
        </if>
        <if test="dbName == 'oracle'">
            <if test="dataList != null and dataList.size > 0">
                <foreach collection="dataList" item="item" separator="union all">
                    (select
                    <choose>
                        <when test="item.id != null">#{item.id}</when>
                        <otherwise>null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.userId != null">,#{item.userId}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.updateDate != null">,#{item.updateDate}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.createDate != null">,#{item.createDate}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.updateById != null">,#{item.updateById}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.createById != null">,#{item.createById}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.authId != null">,#{item.authId}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.authName != null">,#{item.authName}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    <choose>
                        <when test="item.authType != null">,#{item.authType}</when>
                        <otherwise>,null</otherwise>
                    </choose>
                    FROM DUAL
                    )
                </foreach>
            </if>
        </if>
    </insert>

    <update id="updateByPrimaryKey" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
        update pim_data_auth
        <set>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate},
            </if>
            <if test="createDate != null">
                create_date = #{createDate},
            </if>
            <if test="updateById != null">
                update_by = #{updateById},
            </if>
            <if test="createById != null">
                create_by = #{createById},
            </if>
            <if test="authId != null">
                auth_id = #{authId},
            </if>
            <if test="authName != null">
                auth_name = #{authName},
            </if>
            <if test="authType != null">
                auth_type = #{authType},
            </if>
        </set>
        where 1=1
        and id = #{id}
    </update>

    <update id="updateAllByPrimaryKey" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
        update pim_data_auth
        <set>
            user_id = #{userId},
            update_date = #{updateDate},
            create_date = #{createDate},
            update_by = #{updateById},
            create_by = #{createById},
            auth_id = #{authId},
            auth_name = #{authName},
            auth_type = #{authType},
        </set>
        where 1=1
        and id = #{id}
    </update>

    <update id="updateBatchByPrimaryKey" parameterType="com.sinux.core.persistence.BatchEntity">
        <if test="dbName == 'mysql'">
            <if test="dataList != null and dataList.size > 0">
                <foreach collection="dataList" item="item" index="index" open="" close="" separator=";">
                    update pim_data_auth
                    <set>
                        <if test="item.userId != null">
                            user_id = #{item.userId},
                        </if>
                        <if test="item.updateDate != null">
                            update_date = #{item.updateDate},
                        </if>
                        <if test="item.createDate != null">
                            create_date = #{item.createDate},
                        </if>
                        <if test="item.updateById != null">
                            update_by = #{item.updateById},
                        </if>
                        <if test="item.createById != null">
                            create_by = #{item.createById},
                        </if>
                        <if test="item.authId != null">
                            auth_id = #{item.authId},
                        </if>
                        <if test="item.authName != null">
                            auth_name = #{item.authName},
                        </if>
                        <if test="item.authType != null">
                            auth_type = #{item.authType},
                        </if>
                    </set>
                    where 1=1
                    and id = #{item.id}
                </foreach>
            </if>
        </if>
        <if test="dbName == 'oracle'">
            <if test="dataList != null and dataList.size > 0">
                <foreach collection="dataList" item="item" index="index" open="begin" close=";end;" separator=";">
                    update pim_data_auth
                    <set>
                        <if test="item.userId != null">
                            user_id = #{item.userId},
                        </if>
                        <if test="item.updateDate != null">
                            update_date = #{item.updateDate},
                        </if>
                        <if test="item.createDate != null">
                            create_date = #{item.createDate},
                        </if>
                        <if test="item.updateById != null">
                            update_by = #{item.updateById},
                        </if>
                        <if test="item.createById != null">
                            create_by = #{item.createById},
                        </if>
                        <if test="item.authId != null">
                            auth_id = #{item.authId},
                        </if>
                        <if test="item.authName != null">
                            auth_name = #{item.authName},
                        </if>
                        <if test="item.authType != null">
                            auth_type = #{item.authType},
                        </if>
                    </set>
                    where 1=1
                    and id = #{item.id}
                </foreach>
            </if>
        </if>
    </update>

    <update id="deleteByLogic" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
		update pim_data_auth set del_flag = '1' where 1=1
				and id = #{id}
	</update>

    <update id="deleteBatchByLogic" parameterType="com.sinux.core.persistence.BatchEntity">
        <if test="dbName == 'mysql'">
            <if test="dataList != null and dataList.size > 0">
                <foreach collection="dataList" item="item" index="index" open="" close="" separator=";">
                    update pim_data_auth set del_flag = '1' where 1=1
                    and id = #{item.id}
                </foreach>
            </if>
        </if>
        <if test="dbName == 'oracle'">
            <if test="dataList != null and dataList.size > 0">
                <foreach collection="dataList" item="item" index="index" open="begin" close=";end;" separator=";">
                    update pim_data_auth set del_flag = '1' where 1=1
                    and id = #{item.id}
                </foreach>
            </if>
        </if>
    </update>

    <delete id="deleteByPrimaryKey" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
		delete from pim_data_auth where 1=1
				and id = #{id}
    </delete>

    <delete id="deleteBatchByPrimaryKey" parameterType="java.util.List">
        delete from pim_data_auth where
        <foreach collection="list" item="item" index="index" separator="or">
            (
            id = #{item.id}
            )
        </foreach>
    </delete>

    <select id="get" parameterType="java.lang.String" resultType="com.sinux.modules.auth.entity.PimDataAuth">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth a
        WHERE a.id = #{id}
    </select>

    <select id="get" parameterType="com.sinux.modules.auth.entity.PimDataAuth"
            resultType="com.sinux.modules.auth.entity.PimDataAuth">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth a
        <include refid="sql_of_where"/>
    </select>

    <select id="findList" parameterType="com.sinux.modules.auth.entity.PimDataAuth"
            resultType="com.sinux.modules.auth.entity.PimDataAuth">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth a
        <include refid="sql_of_where"/>
    </select>

    <select id="findAllList" parameterType="com.sinux.modules.auth.entity.PimDataAuth"
            resultType="com.sinux.modules.auth.entity.PimDataAuth">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth a WHERE 1=1
    </select>

    <select id="findUniqueByProperty" resultType="com.sinux.modules.auth.entity.PimDataAuth" statementType="STATEMENT">
        SELECT
        <include refid="baseColumnList"/>
        FROM pim_data_auth WHERE ${propertyName} = '${value}'
    </select>

    <update id="update" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
        update pim_data_auth
        <set>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate},
            </if>
            <if test="createDate != null">
                create_date = #{createDate},
            </if>
            <if test="updateById != null">
                update_by = #{updateById},
            </if>
            <if test="createById != null">
                create_by = #{createById},
            </if>
            <if test="authId != null">
                auth_id = #{authId},
            </if>
            <if test="authName != null">
                auth_name = #{authName},
            </if>
            <if test="authType != null">
                auth_type = #{authType},
            </if>
        </set>
        where 1=1
        and id = #{id}
    </update>

    <delete id="delete" parameterType="com.sinux.modules.auth.entity.PimDataAuth">
		delete from pim_data_auth where 1=1
				and id = #{id}
    </delete>

    <delete id="deleteAllData">
		delete from pim_data_auth
    </delete>

    <insert id="insertAuthDatas" parameterType="java.util.List">
        insert all
        <foreach item="item" index="index" collection="list">
            into pim_data_auth(
            id,
            user_id,
            auth_id,
            auth_name,
            auth_type,
            create_date
            )values (
              #{item.id},
            #{item.userId},
            #{item.authId},
            #{item.authName},
            #{item.authType},
            #{item.createDate}
            )
        </foreach>
        select 1 from dual
    </insert>


    <delete id="deleteAuthDatas" parameterType="java.util.Set">
        delete from pim_data_auth where user_id in
        <foreach collection="userIds" item="item" index="index"
                 open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

</mapper>